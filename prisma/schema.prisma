// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum Location {
//   UNRECEIVED
//   WAREHOUSE
// }

// enum Role {
//   ADMIN
//   MANAGER
//   USER
// }
// enum PurchaseStatus {
//   OPEN
//   CLOSE
//   CANCELLED
// }
//
// enum ItemStatus {
//ORDERED
//RECEIVED
//DISPATCHED
//   CLOSE
//   CANCELLED
// }

// enum Status {
//   PENDING
//   APPROVED
//   REJECTED
//   COMPLETED
// }

model Departments {
  Dep_id   Int    @id @default(autoincrement())
  Dep_name String @unique
  User     User[]
}

model User {
  User_id               Int         @id @default(autoincrement())
  User_code             String      @unique() @default(uuid())
  User_dni              Int         @unique
  User_role             String
  User_name             String
  User_surname          String
  User_email            String      @unique
  User_password         String
  User_phoneNumber      String      @unique
  User_address          String
  User_active           Boolean     @default(true)
  User_registrationDate DateTime    @default(now())
  User_depId            Int
  Departments           Departments @relation(fields: [User_depId], references: [Dep_id])

  Supplier    Supplier[]
  Customer    Customer[]
  Procurement Procurement[]

  @@index([User_email, User_phoneNumber, User_dni])
}

model Customer {
  Cust_id               Int      @id @default(autoincrement())
  Cust_dni              Int      @unique
  Cust_name             String
  Cust_surname          String
  Cust_email            String   @unique
  Cust_phoneNumber      String
  Cust_address          String
  Cust_habeasData       Boolean  @default(true)
  Cust_registrationDate DateTime @default(now())
  Cust_userId           Int
  User                  User     @relation(fields: [Cust_userId], references: [User_id])
}

model Supplier {
  Supp_id               Int      @id @default(autoincrement())
  Supp_nit              Int      @unique
  Supp_name             String
  Supp_contactInfo      String
  Supp_email            String   @unique
  Supp_phoneNumber      String
  Supp_city             String
  Supp_address          String
  Supp_active           Boolean  @default(true)
  Supp_registrationDate DateTime @default(now())

  Supp_userId Int
  User        User          @relation(fields: [Supp_userId], references: [User_id])
  Procurement Procurement[]
}

model Category {
  Cat_id   Int    @id @default(autoincrement())
  Cat_name String @unique
  Item     Item[]
}

model Procurement {
  Pro_id            Int      @id @default(autoincrement())
  Pro_desc          String
  Pro_date          DateTime @default(now())
  Pro_totalAmount   Decimal  @default(0)
  Pro_paymentMethod String
  Pro_dueDate       DateTime
  Pro_close         Boolean  @default(false)
  Pro_processed     Boolean  @default(false)

  Pro_userId Int
  User       User     @relation(fields: [Pro_userId], references: [User_id])
  Pro_suppId Int
  Supplier   Supplier @relation(fields: [Pro_suppId], references: [Supp_id])
  Item       Item[]
}

model Item {
  Item_id          Int     @id @default(autoincrement())
  Item_ref         String?
  Item_name        String
  Item_desc        String
  Item_unitCost    Decimal
  Item_qtyOrdered  Int
  Item_totalAmount Decimal
  Item_qtyReceived Int     @default(0)
  Item_location    String  @default("UNRECEIVED")
  Item_status      String  @default("ORDERED")
  Item_unitMeasure String

  Item_proId  Int
  Procurement Procurement @relation(fields: [Item_proId], references: [Pro_id])
  Item_catId  Int
  Category    Category    @relation(fields: [Item_catId], references: [Cat_id])

  @@index([Item_ref])
}
